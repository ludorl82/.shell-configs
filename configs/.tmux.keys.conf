# Copy mode shortcuts
setw -g mode-keys vi
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-selection-no-clear \; run 'echo -n "$(tmux save-buffer -)" | tmux load-buffer -b t -' \; display-message "Yanked to tmux paste buffer!"
bind-key -T copy-mode-vi Y send -X copy-selection-no-clear \; run "tmux save-buffer - | ~/.shell-configs/scripts/pbcopy.sh > /dev/null 2>&1 || true" \; display-message "Yanked to system clipboard!"
bind P run 'tmux set-buffer -b c "$($HOME/.shell-configs/scripts/pbpaste.sh)"; tmux paste-buffer -b c' \; display-message "Pasted from system clipboard!"
unbind p
bind p paste-buffer -b t
#bind p paste-buffer
set -s user-keys[6] "\302\231"
bind-key -n User6 run "tmux save-buffer -b t - | ~/.shell-configs/scripts/pbcopy.sh > /dev/null 2>&1" \; display-message "Yank buffer copied to system clipboard!"
#bind-key -n '\u0099' run "tmux save-buffer -b t - | ~/.shell-configs/scripts/pbcopy.sh > /dev/null 2>&1" \; display-message "Yank buffer copied to system clipboard!"
set -s user-keys[5] "\302\220"
bind-key -n User5 run 'tmux set-buffer -b t "$(xclip -o -sel clipboard)"' \; display-message "System clipboard copied to paste buffer!"
bind-key -n 'C-S-p' run 'tmux set-buffer -b t "$(xclip -o -sel clipboard)"' \; display-message "System clipboard copied to paste buffer!"

# Make escape in vim faster
set -sg escape-time 0

# Toggle synchronize panes
unbind S
bind S setw synchronize-panes

# vim-tmux-navigator
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
unbind l
bind l select-pane -R
unbind h
bind h select-pane -L
unbind j
bind j select-pane -D
unbind k
bind k select-pane -U

# Restoring clear screen
bind C-l send-keys 'C-l'

# Add key bindings to move between windows
# https://superuser.com/questions/1372254/what-are-the-tmux-conf-bindings-for-ctrl-shift-keyboard-shortcuts-with-cygwin-m
set -s user-keys[0] "\302\214"
set -s user-keys[1] "\302\210"
bind-key -n User0 next-window
bind-key -n User1 previous-window
unbind L
bind L next-window
unbind H
bind H previous-window

# Shortcuts to move between sessions with C-Tab and C-S-Tab
# https://github.com/mintty/mintty/issues/757
#set -s user-keys[2] "\e[1;5I"
#set -s user-keys[3] "\e[1;6I"
# Using C-S-j and C-S-k instead
set -s user-keys[2] "\302\212"
set -s user-keys[3] "\302\213"
bind-key -n User2 switch-client -n
bind-key -n User3 switch-client -p
unbind J
bind J switch-client -n
unbind K
bind K switch-client -p
